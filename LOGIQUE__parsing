logique suivante : skipe toutes lignes vide (donc que le \n de get_next_line et le \0)
		dès lors que rencontre un charactère (espace ou 1 ou 0 ou N ou S ou E ou W) la map commence, donc enregistre la map.
		à la fin de la map, il peut y avoir une ou plusieurs lignes intégralement vides mais après ces lignes intégralement vides (sauf \n du get_next_line et \0) il ne doit plus y avoir de charactère sinon erreur 
		aussi, si rencontre un charactère autre que (espace, 1, 0, N, S, E, W) erreur.
		si rencontre le charactère N S E W et que parsing_info->player_set != -1 alors erreur, sinon mets parsing_info->player_set = 1.
		si arrive à la fin de la carte et que parsing_info->player_set != 1 alors erreur.
		lorsque arrive sur le charactère N, S, E, W remplis les coordonnées du charactère dans parsing_info->player_y (dans quelle ligne du **map de parsing_info) et parsing_info->player_x (quel ligne[i])
		



/*
il faut vérifier le charactère à gauche et à droite ainsi que au dessus et en dessous (attention à ne pas out of exception error si le premier ou le dernier élement dans la ligne (sachant qu'une ligne se termine soit par \n ou \0) ainsi que si on se trouve dans la première colonne ou la dernière)
les espaces ont le droit d'etre uniquement a coté de 1 et d'autres espaces sinon erreur
les 1 peuvent être à coté de tout mais doivent être au moins à coté d'un autre 1, 0, N, S, E, W sinon erreur
les 0 peuvent etre a coté d'autres 0, de N, S, E, W et de 1 sinon erreur
les N, S, E, W peuvent etre a coté de 0 et de 1, sinon erreur
les N, S, E, W et 0 n'ont pas le droit d'être le premier element ou le dernier d'une ligne (une ligne se termine par \n ou \0) sinon erreur. 
les N, S, E, W et 0 n'ont pas le droit d'être dans la premiere ou la dernière ligne

Tu devras également faire ceci:
creer une copie de la map et dans la copie dès que tu tombes sur un 0 ou N, S, E, W tu devras vérifier les charactéres autour 
*/

//ne gère pas toutes les erreurs comme des ilots de 1 entre des espaces
